//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace News.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NewsEntities : DbContext
    {
        public NewsEntities()
            : base("name=NewsEntities")
        {
            base.Configuration.ProxyCreationEnabled = false;
        }
    
    
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<CommentMeta> CommentMeta { get; set; }
        public virtual DbSet<Comments> Comments { get; set; }
        public virtual DbSet<Options> Options { get; set; }
        public virtual DbSet<PostMeta> PostMeta { get; set; }
        public virtual DbSet<Posts> Posts { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<UserMeta> UserMeta { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        
    
        public virtual ObjectResult<proc_GetAllRecent_Result> proc_GetAllRecent(Nullable<int> take)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllRecent_Result>("proc_GetAllRecent", takeParameter);
        }
    
        public virtual ObjectResult<proc_GetCategoryByPostName_Result> proc_GetCategoryByPostName(string slug, string typeCategory)
        {
            var slugParameter = slug != null ?
                new ObjectParameter("slug", slug) :
                new ObjectParameter("slug", typeof(string));
    
            var typeCategoryParameter = typeCategory != null ?
                new ObjectParameter("typeCategory", typeCategory) :
                new ObjectParameter("typeCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetCategoryByPostName_Result>("proc_GetCategoryByPostName", slugParameter, typeCategoryParameter);
        }
    
        public virtual ObjectResult<proc_GetCategoryName_Result> proc_GetCategoryName(string slug)
        {
            var slugParameter = slug != null ?
                new ObjectParameter("slug", slug) :
                new ObjectParameter("slug", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetCategoryName_Result>("proc_GetCategoryName", slugParameter);
        }
    
        public virtual ObjectResult<proc_GetPost_Result> proc_GetPost(string slug)
        {
            var slugParameter = slug != null ?
                new ObjectParameter("slug", slug) :
                new ObjectParameter("slug", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetPost_Result>("proc_GetPost", slugParameter);
        }
    
        public virtual ObjectResult<proc_GetPostsByCategory_Result> proc_GetPostsByCategory(string slug, Nullable<int> take, string current_post)
        {
            var slugParameter = slug != null ?
                new ObjectParameter("slug", slug) :
                new ObjectParameter("slug", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var current_postParameter = current_post != null ?
                new ObjectParameter("current_post", current_post) :
                new ObjectParameter("current_post", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetPostsByCategory_Result>("proc_GetPostsByCategory", slugParameter, takeParameter, current_postParameter);
        }
    
        public virtual ObjectResult<proc_GetPostsHot_Result> proc_GetPostsHot(string slug, Nullable<int> take)
        {
            var slugParameter = slug != null ?
                new ObjectParameter("slug", slug) :
                new ObjectParameter("slug", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetPostsHot_Result>("proc_GetPostsHot", slugParameter, takeParameter);
        }
    
        public virtual ObjectResult<proc_GetTagsByPost_Result> proc_GetTagsByPost(string post_name)
        {
            var post_nameParameter = post_name != null ?
                new ObjectParameter("post_name", post_name) :
                new ObjectParameter("post_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetTagsByPost_Result>("proc_GetTagsByPost", post_nameParameter);
        }
    
        public virtual ObjectResult<proc_GetTopView_Result> proc_GetTopView(string key, Nullable<int> take)
        {
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetTopView_Result>("proc_GetTopView", keyParameter, takeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> proc_PostType(string status, string type)
        {
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("proc_PostType", statusParameter, typeParameter);
        }
    }
}
